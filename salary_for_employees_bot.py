import copy
import datetime
import functools
import re
import sqlite3
import time
from datetime import datetime

import requests
import telebot
from telebot import types

from API.secret_info import *

bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start', 'help'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    auth_button = types.KeyboardButton('üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è')

    markup.add(auth_button)
    bot.send_message(message.chat.id,
                     f'ü§ó–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!\n–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –≤—ã –Ω–∞—à–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–ºü´Ö\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëá',
                     reply_markup=markup)


def is_a_user(message):
    with sqlite3.connect("all_info_users.db") as con:
        cur = con.cursor()
        res = cur.execute(f"SELECT telegram_id FROM users WHERE telegram_id = {message.chat.id}")
        result = res.fetchone()
        return result[0]


def is_admin(message):
    with sqlite3.connect("all_info_users.db") as con:
        cur = con.cursor()
        res = cur.execute(f"SELECT admin FROM users WHERE telegram_id = {message.chat.id}")
        result = res.fetchone()
        return result[0]


@bot.message_handler(commands=['menu'])
def call_main_menu(message):
    if is_a_user(message):
        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                            one_time_keyboard=False)
        item2 = types.KeyboardButton('üí∏ –ú–æ—è –∑–∞—Ä–ø–ª–∞—Ç–∞')
        item4 = types.KeyboardButton('üìö –ú–æ–∏ –∫—É—Ä—Å—ã')
        if is_admin(message):
            admin_panel = types.KeyboardButton('üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å')
            markup1.add(item2, item4, admin_panel)
        else:
            markup1.add(item2, item4)
        bot.send_message(message.chat.id, 'üëâ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup1)
    else:
        bot.send_message(message,
                         '‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã!\n\n–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ - —Å–æ–æ–±—â–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: https://t.me/CreativiTTy')

def is_valid_date_format(timedata):
    # Regular expression to match the date format (YYYY-MM-DD)
    date_format_pattern = r'^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|30)$'
    if not re.match(date_format_pattern, timedata):
        return False

    year, month, day = map(int, timedata.split('-'))

    if month < 1 or month > 12:
        return False

    if day < 1 or day > 31:
        return False

    return True


@bot.message_handler(commands=['my_salary'])
def handle_salary_request(message):
    if is_a_user(message):
        msg = bot.send_message(message.chat.id,
                               "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –¥–∞—Ç—É, –° –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—á–Ω—ë—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: \n–ü—Ä–∏–º–µ—Ä: 2023-03-10",
                               reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, process_salary_request_firstdata)
    else:
        bot.send_message(message.chat.id,
                         '‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã!\n\n–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ - —Å–æ–æ–±—â–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: https://t.me/CreativiTTy')


#   –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–≤—É—é –¥–∞—Ç—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–π –¥–∞—Ç—ã.
def process_salary_request_firstdata(message):
    first_timedata = message.text
    if not is_valid_date_format(first_timedata):
        bot.send_message(message.chat.id,
                         "–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏!\n–ü—Ä–∏—á–∏–Ω–∞: –ù–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã.\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–≤–æ–¥–∏—Ç—å –¥–∞—Ç—É –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–û–î-–ú–ï–°–Ø–¶-–î–ï–ù–¨\n–ü—Ä–∏–º–µ—Ä: 2023-03-10")
        call_main_menu(message)
    else:
        msg = bot.send_message(message.chat.id,
                               "–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä—É—é –¥–∞—Ç—É, –î–û –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: \n–ü—Ä–∏–º–µ—Ä: 2023-03-10",
                               reply_markup=telebot.types.ReplyKeyboardRemove())
        bot.register_next_step_handler(msg, functools.partial(process_salary_request_lastdata,
                                                              first_timedata=first_timedata))


def process_salary_request_lastdata(message, first_timedata):
    last_timedata = message.text
    if not is_valid_date_format(last_timedata):
        bot.send_message(message.chat.id,
                         "–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏!\n–ü—Ä–∏—á–∏–Ω–∞: –ù–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã.\n–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–≤–æ–¥–∏—Ç—å –¥–∞—Ç—É –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–û–î-–ú–ï–°–Ø–¶-–î–ï–ù–¨\n–ü—Ä–∏–º–µ—Ä: 2023-03-10")
        call_main_menu(message)
    else:
        create_export_id_for_my_salary(message, first_timedata, last_timedata)


def create_export_id_for_my_salary(message, first_timedata, last_timedata):
    url = f"https://{account_name}/pl/api/account/deals?key={secret_key}&created_at[from]={first_timedata}&created_at[to]={last_timedata}&status=payed"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        print(data)
        if data['error_message'] == '–£–∂–µ –∑–∞–ø—É—â–µ–Ω –æ–¥–∏–Ω —ç–∫—Å–ø–æ—Ä—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ':
            bot.send_message(message.chat.id,
                             "–£–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–∞–∫–∏–µ –ª–∏–±–æ –¥–∞–Ω–Ω—ã–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã.")
            call_main_menu(message)
        else:
            export_id = data['info']['export_id']
            my_salary(message, export_id, firstdatetime=first_timedata, lastdatetime=last_timedata)
    else:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {response.status_code} - {response.text}")
        return


tarif_counters = {
    '–ê–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è': {'count': 0, 'prineseno': 0},
    '"–ü—Ä–æ—Ñ–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π + –æ—Ç—Ä–∞–±–æ—Ç–∫–∞"': {'count': 0, 'prineseno': 0},
    '"–ü—Ä–æ—Ñ–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π + –æ—Ç—Ä–∞–±–æ—Ç–∫–∞" 2022-2023': {'count': 0, 'prineseno': 0},
    '"–ü—Ä–æ—Ñ–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π"': {'count': 0, 'prineseno': 0},
    '"–ü—Ä–æ—Ñ–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π" 2022-2023': {'count': 0, 'prineseno': 0},
    '"–ü—Ä–æ—Ñ–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π + –æ—Ç—Ä–∞–±–æ—Ç–∫–∞" 2022 -2023': {'count': 0, 'prineseno': 0}
}


def my_salary(message, export_id, firstdatetime, lastdatetime):
    bot.send_message(message.chat.id,
                     "ü§ñüìù–ù–∞—á–∞–ª–∞—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö.\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è 5 –º–∏–Ω—É—Ç, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—á–µ—Ä–µ–¥–∏.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µüí´")
    url = f"https://{account_name}/pl/api/account/exports/{export_id}?key={secret_key}"
    while True:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            if data['error_message'] == '–§–∞–π–ª –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω ':
                time.sleep(60)
            else:
                break
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {response.status_code} - {response.text}")
            return
    users_data = data['info']['items']

    #   –ü–æ–¥—Å—á—ë—Ç —É—á–µ–Ω–∏–∫–æ–≤ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ.

    tarif_counters_default = copy.deepcopy(tarif_counters)
    for user in users_data:
        tarif = user[8]
        tarif = tarif.replace('–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è. –¢–∞—Ä–∏—Ñ: ', '')
        if tarif == '"–ü—Ä–æ—Ñ–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π + –æ—Ç—Ä–∞–±–æ—Ç–∫–∞" 2022 -2023':
            money = float(user[17]) - 5000
        else:
            money = float(user[17])

        if tarif in tarif_counters_default:
            if tarif == '"–ü—Ä–æ—Ñ–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π + –æ—Ç—Ä–∞–±–æ—Ç–∫–∞"' or tarif == '"–ü—Ä–æ—Ñ–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π + –æ—Ç—Ä–∞–±–æ—Ç–∫–∞" 2022-2023':
                tarif = '"–ü—Ä–æ—Ñ–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π + –æ—Ç—Ä–∞–±–æ—Ç–∫–∞" 2022 -2023"'
            elif tarif == '"–ü—Ä–æ—Ñ–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π"':
                tarif = '"–ü—Ä–æ—Ñ–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π" 2022-2023"'
            else:
                tarif_counters_default[tarif]['count'] += 1
                tarif_counters_default[tarif]['prineseno'] += money
        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ: {tarif}. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Å–ª–æ–≤–∞—Ä—ë–º \"tarif_counters\"")

    message_to_send = f"üìù–û—Ç—á—ë—Ç –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É [–ó–ê–†–ü–õ–ê–¢–ê]\n–í—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å {firstdatetime} –ø–æ {lastdatetime}\n"
    total_money = 0
    for tarif, count_data in tarif_counters_default.items():
        count = count_data['count']
        money = count_data['prineseno']
        if count > 0:
            tariff_earnings = round(money * 0.2)
            total_money += tariff_earnings
            message_to_send += f"\nüìç–¢–∞—Ä–∏—Ñ: {tarif}\nüë§–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}\nüí≤–í–∞—à–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞: {tariff_earnings} ‚ÇΩ\n\n"

    bot.send_message(message.chat.id, message_to_send + f"\n‚úîÔ∏è–ò—Ç–æ–≥–æ: {total_money} ‚ÇΩ")
    # –£–¥–∞–ª—è–µ–º –∫–æ–ø–∏—é —Å–ª–æ–≤–∞—Ä—è, —Ç.–∫ –æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
    del tarif_counters_default
    call_main_menu(message)


#   –ù—É–∂–Ω–æ –¥–ª—è "üìö –ú–æ–∏ –∫—É—Ä—Å—ã"

courses_dict = {
    "–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è": [
        '"–ü—Ä–æ—Ñ–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π + –æ—Ç—Ä–∞–±–æ—Ç–∫–∞"',
        '"–ü—Ä–æ—Ñ–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π + –æ—Ç—Ä–∞–±–æ—Ç–∫–∞" 2022-2023"',
        '"–ü—Ä–æ—Ñ–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π"',
        '"–ü—Ä–æ—Ñ–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π" 2022-2023',
        '"–ü—Ä–æ—Ñ–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π + –æ—Ç—Ä–∞–±–æ—Ç–∫–∞" 2022 -2023',
        '–ê–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è'
    ]
}


def give_coursename(message):
    with sqlite3.connect("all_info_users.db") as con:
        cur = con.cursor()
        res = cur.execute(f"SELECT course_curator FROM users WHERE telegram_id = {message.chat.id}")
        result = res.fetchone()
        if result:
            course_curator = result[0]
            return course_curator


@bot.message_handler(commands=['my_courses'])
def my_courses(message):
    with sqlite3.connect("all_info_users.db") as con:
        cur = con.cursor()
        res = cur.execute(f"SELECT course_curator FROM users WHERE telegram_id = {message.chat.id}")
        result = res.fetchone()

        if result:
            course_curator = result[0]
            if course_curator == "–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è":  # Check if the course curator is "–ö–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è"
                required_courses = [
                    '"–ü—Ä–æ—Ñ–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π" 2022-2023',
                    '"–ü—Ä–æ—Ñ–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π + –æ—Ç—Ä–∞–±–æ—Ç–∫–∞" 2022 -2023',
                    '–ê–ø–ø–∞—Ä–∞—Ç–Ω–∞—è –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è'
                ]
                filtered_courses = [
                    course for course in courses_dict[course_curator] if course in required_courses
                ]
                courses_text = "\n".join(filtered_courses)
                bot.send_message(message.chat.id,
                                 f"üëë–í—ã –∫—É—Ä–∞—Ç–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è \"{course_curator}\".\n‚úÖ–í–∞—à–∏ –∫—É—Ä—Å—ã:\n{courses_text}")
            else:
                bot.send_message(message.chat.id,
                                 f"üëë–í—ã –∫—É—Ä–∞—Ç–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è \"{course_curator}\", –Ω–æ —É –≤–∞—Å –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫—É—Ä—Å–æ–≤.")
        else:
            bot.send_message(message.chat.id, "‚ùå–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∫—É—Ä–∞—Ç–æ—Ä–æ–º –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")


def all_info_about_teachers(message):
    user_info_list = []
    with sqlite3.connect("all_info_users.db") as con:
        cur = con.cursor()
        res = cur.execute("SELECT telegram_id, user_name, course_curator FROM users")
        for telegram_id, user_name, course_curator in res.fetchall():
            user_info = f"ID: {telegram_id} | –ò–º—è: {user_name} | –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {course_curator}"
            user_info_list.append(user_info)
            print(user_info)
        if not user_info_list:
            user_info_list.append("No users found.")
    message_text = "–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n" + "\n".join(user_info_list)
    bot.send_message(message.chat.id, message_text)


def add_teacher(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ telegram_id –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
                     reply_markup=telebot.types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, get_telegram_id)


def get_telegram_id(message):
    telegram_id = message.text

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
    bot.register_next_step_handler(message, get_user_name, telegram_id)


def get_user_name(message, telegram_id):
    user_name = message.text

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
    bot.register_next_step_handler(message, get_course_curator, telegram_id, user_name)


def get_course_curator(message, telegram_id, user_name):
    course_curator = message.text

    # –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    with sqlite3.connect("all_info_users.db") as con:
        cur = con.cursor()
        cur.execute(
            f"INSERT INTO users (`id`, `telegram_id`, `user_name`, `course_curator`, `admin`) VALUES (NULL, '{telegram_id}', '{user_name}', '{course_curator}', '0')"
        )
        con.commit()

    bot.send_message(message.chat.id, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    all_info_about_teachers(message)
    call_main_menu(message)


def delete_teacher(message):
    id_prepoda = message.text
    with sqlite3.connect("all_info_users.db") as con:
        cur = con.cursor()
        try:
            cur.execute(f"DELETE FROM users WHERE telegram_id = {id_prepoda}")
            bot.send_message(message.chat.id, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
        except:
            print(f"–ü—Ä–µ–ø–æ–¥–∞ —Å —Ç–∞–∫–∏–º –∞–π–¥–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. ({id_prepoda})")
            bot.send_message(message.chat.id, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∞–π–¥–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    all_info_about_teachers(message)
    call_main_menu(message)


@bot.message_handler(content_types=['text'])
def bot_message(message):
    if message.chat.type == 'private':
        if message.text == 'üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è':
            if is_a_user(message):
                bot.send_message(message.chat.id, '‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!')
                call_main_menu(message)
            else:
                print(message.chat.id)
                bot.send_message(message.chat.id,
                                 '‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã!\n\n–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞ - —Å–æ–æ–±—â–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: https://t.me/CreativiTTy')
        elif message.text == 'üí∏ –ú–æ—è –∑–∞—Ä–ø–ª–∞—Ç–∞' and is_a_user(message):
            handle_salary_request(message)
        elif message.text == 'üìö –ú–æ–∏ –∫—É—Ä—Å—ã' and is_a_user(message):
            my_courses(message)
        elif message.text == 'üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å' and is_admin(message):
            markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item2 = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
            item3 = types.KeyboardButton('–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')
            item4 = types.KeyboardButton('–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π')
            back = types.KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
            markup1.add(item2, item3, item4, back)
            bot.send_message(message.chat.id, '–í—ã –≤–æ—à–ª–∏ –≤ –ê–¥–º–∏–Ω. –ü–∞–Ω–µ–ª—å.', reply_markup=markup1)
        elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é" and is_a_user(message):
            call_main_menu(message)
        elif message.text == "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è" and is_admin(message):
            add_teacher(message)
        elif message.text == "–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è" and is_admin(message):
            all_info_about_teachers(message)
            msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: ",
                                   reply_markup=telebot.types.ReplyKeyboardRemove())
            bot.register_next_step_handler(msg, delete_teacher)
        elif message.text == "–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π" and is_admin(message):
            all_info_about_teachers(message)


bot.polling(none_stop=True)
